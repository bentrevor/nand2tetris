// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=zerx);       /* if zx then x=0 */
    Not16(in=zerx, out=notzerx);
    Mux16(a=zerx, b=notzerx, sel=nx, out=negx);  /* if nx then x=!x */

    Mux16(a=y, b=false, sel=zy, out=zery);       /* if zy then y=0 */
    Not16(in=zery, out=notzery);
    Mux16(a=zery, b=notzery, sel=ny, out=negy);  /* if ny then y=!y */

    Add16(a=negx, b=negy, out=added);
    And16(a=negx, b=negy, out=anded);

    Mux16(a=anded, b=added, sel=f, out=fout);    /* if f then out=x+y else out=x&y */
    Not16(in=fout, out=notfout);

    Mux16(a=fout, b=notfout, sel=no, out=out,    /* if no then out=!out */
          out[0..7]=negoutA, out[8..15]=negoutB,
          out[15]=ng);                           /* the first bit determines pos/neg */

    Or8Way(in=negoutA, out=anyones1);
    Or8Way(in=negoutB, out=anyones2);
    Or(a=anyones1, b=anyones2, out=notzr);       /* check if any of negout's bits are 1 */
    Not(in=notzr, out=zr);                       /* if out=0 then zr=1 else zr=0 */
}
